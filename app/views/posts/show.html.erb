<p>
  Titel:<br />
  <strong><%= @post.title %></strong>
</p>

<p>
  Text:<br />
  <%= @post.text %>
</p>

<div class="edit_button">
<%= link_to 'Edit post', edit_post_path(@post) %> |
<%= link_to 'Back to posts', posts_path %>
</div>

<hr />

<!-- <p>Kommentar:</p> -->
<%= render @post.comments %>

<!-- This will render the partial in app/views/comments/_comment.html.erb once for each comment that is in the @post.comments collection. As the render method iterates over the @post.comments collection, it assigns each comment to a local variable named the same as the partial, in this case comment which is then available in the partial for us to show.-->

<hr />

<p>Schreibe einen Kommentar:</p>
<%= render "comments/form" %>
<!-- This adds a form on the Post show page that creates a new comment by calling the CommentsController create action. The form_for call here uses an array, which will build a nested route, such as /posts/1/comments.
As it is rendering here, you will find the code for the form in app/views/comments/_form.html.erb -->

<!-- The second render just defines the partial template we want to render, comments/form. Rails is smart enough to spot the forward slash in that string and realize that you want to render the _form.html.erb file in the app/views/comments directory. -->

<!-- The @post object is available to any partials rendered in the view because we defined it as an instance variable. -->



